#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\renewcommand{\listtablename}{Indice de tablas}
\renewcommand{\tablename}{Tabla} 
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize 12
\spacing double
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Machine Learning
\end_layout

\begin_layout Standard
En este capítulo se realiza un breve repaso sobre conceptos básicos que
 envuelven a Machine Learning.
 El objetivo es visualizar qué aspectos de Machine Learning fueron tomados
 como componentes de solución al problema de estudio.
\end_layout

\begin_layout Standard
En las últimas dos décadas, Machine Learning se ha convertido en uno de
 los pilares de la tecnología de la información y, con eso, una parte bastante
 central de nuestra vida.
 Debido a que cada vez hay más datos disponibles disponibles, existen buenas
 razones para creer que el análisis inteligente de datos será aún más importante
 como un ingrediente necesario para el progreso tecnológico.
 El aprendizaje automático puede aplicarse en muchos aspectos.
 Ahora discutimos una serie de aplicaciones, los tipos de datos con los
 que se ocupan y, finalmente, formalizamos los problemas de una manera algo
 más estilizada.
 Lo último es clave si queremos evitar reinventar la rueda para cada nueva
 aplicación.
 En cambio, gran parte del arte del aprendizaje automático es reducir una
 gama de problemas bastante dispares a un conjunto de prototipos bastante
 reducido.
 Gran parte de la ciencia del aprendizaje automático es entonces resolver
 esos problemas y proporcionar buenas garantías para las soluciones.
\end_layout

\begin_layout Section
Definición
\end_layout

\begin_layout Standard
En 1959 Arthur Samuel en una publicación escribió: 
\shape italic

\begin_inset Quotes eld
\end_inset

Programming computers to learn from experience should eventually eliminate
 the need for much of this detailed programming effort
\begin_inset Quotes erd
\end_inset


\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Arthur1959"

\end_inset

.
 Este pionero de machine learning ya presagiaba que los programas, a partir
 del aprendizaje sobre datos históricos (la experiencia), podrían efectuar
 tareas de toma de decisiones sin ser programadas explícitamente dichas
 decisiones.
\end_layout

\begin_layout Standard
Samuel define machine learning como sigue: 
\shape italic

\begin_inset Quotes eld
\end_inset

Machine Learning es un campo de estudio que da a las computadoras la capacidad
 de aprender sin ser explícitamente programadas
\begin_inset Quotes erd
\end_inset


\shape default
.
 Otro investigador de machine learning Tom Mitchell propuso en 1998 la siguiente
 definición: 
\shape italic

\begin_inset Quotes eld
\end_inset

Well posed Learning Problem: A computer program is said to learn from experience
 E with respect to some task T and some performance measure P, if its performanc
e on T, as measured by P, improves with experience E
\begin_inset Quotes erd
\end_inset


\shape default
.
 Donde se nos indica que el aprendizaje en las máquinas deberá ser parecido
 al aprendizaje en los humanos, por ejemplo cuando una criatura comienza
 a hablar a través de la experiencia de pronunciar las palabras y de su
 interacción con otras personas, entonces sucede que su capacidad de hablar
 se va perfeccionando o mejorando.
\end_layout

\begin_layout Standard

\shape italic
\begin_inset Quotes eld
\end_inset

The purpose of machine learning is to learn from training data in order
 to make as good as possible predictions on new, unseen, data
\begin_inset Quotes erd
\end_inset


\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "Jean2016"

\end_inset

.
 La dificultad radica en que debemos construir modelos que nos acerquen
 a una buena predicción sobre datos aún no conocidos o imprevistos.
 Peter Prettenhofer y Gille Louppe presentan la siguiente definición:
\end_layout

\begin_layout Standard
Data comes as...
\end_layout

\begin_layout Itemize
A set of examples 
\begin_inset Formula $\left\{ \left(x_{i},y_{i}\right)\mid0\leq i<n\;samples\right\} $
\end_inset

, with
\end_layout

\begin_deeper
\begin_layout Itemize
Feature vector 
\begin_inset Formula $x\in\mathbb{R}^{n\;features}$
\end_inset

, and
\end_layout

\begin_layout Itemize
Response 
\begin_inset Formula $y\in\mathbb{R}$
\end_inset

(regression) or 
\begin_inset Formula $y\in\left\{ -1,1\right\} $
\end_inset

 (classification)
\end_layout

\end_deeper
\begin_layout Itemize
Goal is to...
\end_layout

\begin_deeper
\begin_layout Itemize
Find a function 
\begin_inset Formula $ŷ=f\left(x\right)$
\end_inset


\end_layout

\begin_layout Itemize
Such that error 
\begin_inset Formula $L\left(y,ŷ\right)$
\end_inset

on new (unseen) 
\begin_inset Formula $x$
\end_inset

 is minimal
\end_layout

\end_deeper
\begin_layout Section
Formas de Aprendizaje 
\begin_inset CommandInset citation
LatexCommand citet
key "IAEModerno2"

\end_inset


\end_layout

\begin_layout Standard
Los algoritmos de aprendizaje automático se pueden agrupar según la forma
 en que se realiza el aprendizaje, pero teniendo en cuenta que todos reciben
 un conjunto de ejemplos del cuál aprender.
 Uno de los componentes más importantes al momento de diagnosticar la naturaleza
 del problema de aprendizaje es el tipo de retroalimentación disponible
 para el aprendizaje.
 Hay tres tipos distintos de aprendizaje: supervisado, no supervisado y
 por refuerzo.
\end_layout

\begin_layout Subsection
Aprendizaje supervisado
\end_layout

\begin_layout Standard
En los problemas de apredizaje supervisado los algoritmos reciben como entrada
 datos de entrenamiento que ya tienen resultados conocidos o etiquetas.
 En el caso más general un instructor provee el valor correcto de la salida
 de cada ejemplo.
 Como resultado se aprende una función a partir de las entradas y salidas
 de los ejemplos.
 Como ejemplo de aplicación están los vehículos autoconducidos que deben
 aprender a diferenciar una calle de la que no es (salida booleana es calle
 o no es calle), también debe aprender a frenar (salida booleana frenar
 o no frenar), etc.
 Example problems are classification and regression para Supervised Learning.
 Example algorithms include Logistic Regression and the Back Propagation
 Neural Network.
\end_layout

\begin_layout Standard
El problema de estudio utiliza algoritmos de aprendizaje supervisado, donde
 el experto en compras da la respuesta correcta a cada ejemplo.
\end_layout

\begin_layout Subsection
Aprendizaje no supervisado
\end_layout

\begin_layout Standard
En los problemas de apredizaje no supervisado los algoritmos reciben como
 entrada datos de entrenamiento que no tienen resultados conocidos o etiquetas.
 Se buscan estructuras presentes y como resultado se pueden extraer reglas
 generales, o reducir sistemáticamente la redundancia, o se pueden organizar
 los datos por similitud.
 Se aprende a partir de patrones de entrada de los que no se dispone de
 sus valores de salida, es decir a priori no hay etiquetas o respuesta correcta
 en los ejemplos.
 Como ejemplo de aplicación está el caso de la computadora que aprendió
 sola el concepto de un animal gato.
 Example problems are clustering, dimensionality reduction and association
 rule learning para Unsupervised Learning.
 Example algorithms include: the Apriori algorithm and k-Means.
\end_layout

\begin_layout Subsection
Aprendizaje por refuerzo
\end_layout

\begin_layout Standard
El problema del aprendizaje por refuerzo es el más general de las tres categoría
s.
 En vez de que un instructor indique al agente qué hacer, el agente de aprendiza
je por refuerzo debe aprender a partir del refuerzo o recompensa.
 Por ejemplo, la falta de propina al final del viaje (o una gran factura
 por golpear la parte trasera del coche de delante) da al agente algunas
 indicaciones de que su comportamiento no es el deseable.
 El aprendizaje por refuerzo típicamente incluye el subproblema de aprender
 cómo se comporta el entorno.
\end_layout

\begin_layout Section
Algoritmos de Machine Learning
\end_layout

\begin_layout Standard
El Dr.
 Jason Brownlee es un especialista en aprendizaje automático, desarrollador,
 escritor y empresario.
 Ha trabajado en sistemas de aprendizaje automático para la defensa, startups
 y pronósticos meteorológicos.
 Tiene una comunidad en https://machinelearningmastery.com/, la cual empezó
 porque le apasiona ayudar a los desarrolladores profesionales a comenzar
 y aplicar con confianza el machine learning que les permita resolver problemas
 complejos.
 Los algoritmos de aprendizaje automático se pueden agrupar según la similaridad
 en términos de su forma o función, como por ejemplo los métodos basados
 en árboles y los métodos inspirados en redes neuronales.
 Se muestra en la siguiente figura lo propuesto por el Dr.
 Jason:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename recursos/MachineLearningAlgorithms.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Algoritmos de machine learning
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
No hay un consenso general de cómo agrupar los algoritmos de machine learning
 en términos de su función o de cómo trabajan.
 La figura mostró un método útil de agrupación, que no es perfecto y ni
 exhaustivo en los grupos y algoritmos.
 Hay algoritmos que pueden encajar en varias categorías como Learning Vector
 Quantization que es a la vez un método inspirado en una red neuronal y
 un método basado en instancia.
 También hay categorías que tienen el mismo nombre que describen el problema
 y la clase de algoritmo como Regression y Clustering.
 Se podría manejar estos casos listando los algoritmos dos veces o insertando
 en el grupo al que subjetivamente se ajusta mejor.
 Se utiliza este último enfoque de no duplicar algoritmos.
\end_layout

\begin_layout Subsection
Algoritmos de regresión
\end_layout

\begin_layout Standard
La regresión modela la relación que existe entre variables, se mejora iterativam
ente utilizando una medida de error en las predicciones hechas por el modelo.
 Los métodos de regresión son herramientas de las estadísticas que se han
 adoptado en el aprendizaje de la máquina.
 Podemos utilizar el término regresión para referirnos a la clase de problema
 y también a la clase de algoritmo.
 Para ser más exactos, la regresión es realmente un proceso.
\end_layout

\begin_layout Subsection
Algoritmos basados en instancia
\end_layout

\begin_layout Standard
El modelo de aprendizaje basado en instancia es un problema de decisión
 con instancias o ejemplos de datos de entrenamiento que se consideran important
es o requeridos para el modelo.
 Estos métodos típicamente construyen una base de datos con ejemplos y los
 compara con los nuevos datos utilizando una medida de similaridad para
 así encontrar la mejor coincidencia y hacer la predicción.
 Por esta razón, los métodos basados en la instancia también se llaman métodos
 de aprendizaje basado en memoria.
 El enfoque se pone en la representación de las instancias almacenadas y
 las medidas de similaridad utilizadas entre instancias.
\end_layout

\begin_layout Subsection
Algoritmos de regularización
\end_layout

\begin_layout Standard
Comprende una extensión hecha a otros métodos (típicamente a los métodos
 de regresión).
 Penaliza los modelos basándose en sus complejidades, favoreciendo modelos
 más simples que también son mejores de generalizar.
 Son populares, potentes y en general simples modificaciones de otros métodos.
\end_layout

\begin_layout Subsection
Algoritmos de árboles de decisión
\end_layout

\begin_layout Standard
Los métodos de árboles de decisión construyen un modelo de decisiones hechas
 en base a los valores de atributos en los datos.
 Las decisiones se bifurcan en la estructura del árbol hasta que se tome
 una decisión de predicción para un registro dado.
 Los árboles de decisión son entrenados en los datos para problemas de clasifica
ción y regresión.
 Los árboles de decisión son a menudo rápidos y precisos y un gran favorito
 en aprendizaje automático.
\end_layout

\begin_layout Subsection
Algoritmos bayesianos
\end_layout

\begin_layout Standard
Los métodos bayesianos son los que aplican explícitamente el teorema de
 Bayes para problemas tales como la clasificación y la regresión.
\end_layout

\begin_layout Subsection
Algoritmos de agrupación
\end_layout

\begin_layout Standard
La agrupación así como también la regresión describen la clase de problema
 y la clase de método.
 Los métodos de agrupación suelen estar organizados según el enfoque del
 modelado, tales como los basados en centroides y los jerárquicos.
 Todos los métodos atañen a la utilización de las estructuras inherentes
 en los datos, para organizar dichos datos de la mejor manera posible en
 grupos de máxima uniformidad.
\end_layout

\begin_layout Subsection
Algoritmos de aprendizaje de reglas de asociación
\end_layout

\begin_layout Standard
Los métodos de aprendizaje de reglas de asociación extraen reglas que mejor
 explican las relaciones observadas entre variables en los datos.
 Estas reglas pueden descubrir asociaciones importantes y comercialmente
 útiles, en grandes conjuntos de datos multidimensionales que pueden ser
 explotados por una organización.
\end_layout

\begin_layout Subsection
Algoritmos de redes neurales artificiales
\end_layout

\begin_layout Standard
Las redes neuronales artificiales son modelos inspirados en la estructura
 y/o función de las redes neuronales biológicas.
 Son una clase de búsqueda de patrones que se utilizan comúnmente para problemas
 de regresión y clasificación.
 Es realmente un enorme subcampo compuesto de cientos de algoritmos y variacione
s para todo tipo de tipos de problemas.
 Se ha separado el aprendizaje profundo de las redes neuronales debido a
 su enorme crecimiento y popularidad.
\end_layout

\begin_layout Subsection
Algoritmos de aprendizaje profundo
\end_layout

\begin_layout Standard
Los métodos de aprendizaje profundo son una moderna actualización de las
 redes neuronales artificiales que explotan el abundante y barato poder
 de computación.
 Se ocupan en construir redes neuronales mucho más grandes y complejas y,
 muchos métodos se refieren a problemas de aprendizaje semi-supervisados
 donde grandes conjuntos de datos contienen muy pocos datos etiquetados.
\end_layout

\begin_layout Subsection
Algoritmos de reducción de dimensionalidad
\end_layout

\begin_layout Standard
Al igual que los métodos de agrupación, la reducción de la dimensionalidad
 busca y explora la estructura inherente en los datos, pero en este caso
 de una manera no supervisada o en orden a resumir o describir los datos
 utilizando menos información.
 Esto puede ser útil para visualizar datos dimensionales o para simplificar
 datos que luego se pueden utilizar en un método de aprendizaje supervisado.
 Muchos de estos métodos pueden ser adaptados para su uso en clasificación
 y regresión.
\end_layout

\begin_layout Subsection
Algoritmos ensamble
\end_layout

\begin_layout Standard
Métodos de ensamble son modelos compuestos por múltiples modelos más débiles,
 que son entrenados independientemente y cuyas predicciones son combinadas
 de alguna manera para hacer la predicción general.
 Mucho esfuerzo se pone en qué tipos de aprendices débiles combinar y las
 formas en que hay que combinarlos.
 Esta es una clase de técnica muy poderosa y como tal es muy popular.
\end_layout

\begin_layout Subsection
Otros algoritmos
\end_layout

\begin_layout Standard
Algoritmos no lineales como:
\end_layout

\begin_layout Itemize
Support Vector Machines
\end_layout

\begin_layout Standard
Algoritmos para tareas especiales en el proceso del aprendizaje automático:
\end_layout

\begin_layout Itemize
Feature selection algorithms 
\end_layout

\begin_layout Itemize
Algorithm accuracy evaluation 
\end_layout

\begin_layout Itemize
Performance measures
\end_layout

\begin_layout Standard
Algoritmos para subcampos de especialidad de aprendizaje automático:
\end_layout

\begin_layout Itemize
Computational intelligence (evolutionary algorithms, etc.)
\end_layout

\begin_layout Itemize
Computer Vision (CV)
\end_layout

\begin_layout Itemize
Natural Language Processing (NLP)
\end_layout

\begin_layout Itemize
Recommender Systems
\end_layout

\begin_layout Itemize
Reinforcement Learning
\end_layout

\begin_layout Itemize
Graphical Models
\end_layout

\begin_layout Section
Problemas de clasificación y regresión
\end_layout

\begin_layout Standard
En los problemas de clasificación el modelo creado debe predecir la clase,
 tipo o categoría de la salida.
\end_layout

\begin_layout Standard
La gama de problemas de aprendizaje es claramente grande, como vimos al
 discutir aplicaciones.
 Dicho esto, los investigadores han identificado un número cada vez mayor
 de plantillas que se pueden usar para abordar un gran conjunto de situaciones.
 Son esas plantillas las que facilitan el despliegue del aprendizaje automático
 en la práctica y nuestra discusión se centrará en gran medida en un conjunto
 de elección de tales problemas.
 Ahora ofrecemos una lista completa de plantillas.
\end_layout

\begin_layout Subsection
Clasificación binaria
\end_layout

\begin_layout Standard
En su forma más simple se reduce a la siguiente cuestión: dado un patrón
 
\begin_inset Formula $x$
\end_inset

 extraído de un dominio 
\begin_inset Formula $X$
\end_inset

, estimar qué valor asumirá una variable aleatoria binaria asociada 
\begin_inset Formula $y\in\left\{ \pm1\right\} $
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "IntroML2008"

\end_inset

.
\end_layout

\begin_layout Standard
La clasificación binaria es probablemente el problema más estudiado en el
 aprendizaje automático y ha dado lugar a una gran cantidad de desarrollos
 algorítmicos y teóricos importantes durante el siglo pasado.
 En su forma más simple, se reduce a la pregunta: dado un patrón x extraído
 de un dominio X, estimar qué valor asumirá una variable aleatoria binaria
 asociada y ∈ {± 1}.
\end_layout

\begin_layout Standard
Por ejemplo, si se muestran imágenes de manzanas y naranjas, podemos indicar
 si el objeto en cuestión es una manzana o una naranja.
 Igualmente bien, podríamos querer predecir si un propietario de vivienda
 podría incumplir su préstamo dado sus datos de ingresos y su historial
 de crédito, o si un correo electrónico determinado es spam o jamón.
 La capacidad de resolver este problema básico ya nos permite abordar una
 gran variedad de configuraciones prácticas.
 Existen muchas variantes con respecto al protocolo en el que estamos obligados
 a hacer nuestra estimación:
\end_layout

\begin_layout Subsection
Clasificación multiclase
\end_layout

\begin_layout Standard
Es la extensión lógica de la clasificación binaria.
 La principal diferencia es que ahora 
\begin_inset Formula $y\in\left\{ 1,2,3..,N\right\} $
\end_inset

 puede asumir un rango de valores diferentes 
\begin_inset CommandInset citation
LatexCommand cite
key "IntroML2008"

\end_inset

.
 El problema de estudio utiliza clasificación multiclase, donde 
\begin_inset Formula $y\in\left\{ Nada,Poco,Medio,Mucho\right\} $
\end_inset


\end_layout

\begin_layout Standard
La clasificación multiclase es la extensión lógica de la clasificación binaria.
 La principal diferencia es que ahora y ∈ {1, ....
 , n} puede asumir un rango de valores diferentes.
 Por ejemplo, es posible que deseemos clasificar un documento de acuerdo
 con el idioma en que fue escrito (inglés, francés, alemán, español, hindi,
 japonés, chino, ...).
 La principal diferencia con anterioridad es que el costo del error puede
 depender en gran medida del tipo de error que cometamos.
 Por ejemplo, en el problema de evaluar el riesgo de cáncer, hace una diferencia
 significativa si clasificamos erróneamente una etapa temprana del cáncer
 como saludable (en cuyo caso es probable que el paciente muera) o como
 una etapa avanzada de cáncer (en en qué caso es probable que el paciente
 sufra molestias por un tratamiento excesivamente agresivo).
\end_layout

\begin_layout Subsection
Regression
\end_layout

\begin_layout Standard
Es otra aplicación prototípica.
 Aquí el objetivo es estimar una variable de valor real y ∈ R dado un patrón
 x (ver, por ejemplo, la Figura 1.7).
 Por ejemplo, podríamos querer estimar el valor de un stock al día siguiente,
 el rendimiento de un fabuloso semiconductor dado el proceso actual, el
 contenido de hierro de las mediciones de espectroscopia de masas dadas
 por el mineral o la frecuencia cardíaca de un atleta, dada la información
 del acelerómetro.
 Una de las cuestiones clave en las que los problemas de regresión difieren
 entre sí es la elección de una pérdida.
 Por ejemplo, al estimar los valores de stock, nuestra pérdida para una
 opción de venta será decididamente unilateral.
 Por otro lado, a un deportista aficionado solo le importaría que nuestra
 estimación de la frecuencia cardíaca coincida con la media real.
\end_layout

\begin_layout Section
Machine Learning y Demand Forecasting
\end_layout

\begin_layout Standard
Publicaciones que comprenden los últimos años, presentan trabajos muy interesant
es en el ámbito de Machine Learning asociado al Demand Forecasting (Pronóstico
 de la Demanda).
 Se citan a continuación algunos de los problemas afrontados en publicaciones,
 que dan una idea del estado del arte en la conjunción de estos dos temas:
\end_layout

\begin_layout Itemize
Mejoramiento en la precisión de la previsión de demanda de agua urbana para
 la ciudad de Montreal – Canadá (2017).
\end_layout

\begin_layout Itemize
Proposición de un método de control inteligente para sistemas de calefacción
 y refrigeración.
 (2017).
\end_layout

\begin_layout Itemize
Proposición de un modelo predictivo probabilístico de consumo de energía,
 basado en datos, para la predicción del consumo en edificios residenciales
 (2017).
\end_layout

\begin_layout Itemize
Revisión de diferentes modelos de predicción de la carga eléctrica con un
 enfoque particular en modelos de regresión (2017).
\end_layout

\begin_layout Itemize
Aplicación de Machine Learning en la nube para encontrar conversaciones
 de los consumidores que influyen en las decisiones de compras (2016).
\end_layout

\begin_layout Itemize
Modelado de la demanda turística de España (2016).
\end_layout

\begin_layout Itemize
Predicción del Mercado de Valores (2016).
\end_layout

\begin_layout Itemize
Análisis para un minorista en línea: Previsión de la demanda y optimización
 de precios (2016).
\end_layout

\begin_layout Itemize
Demanda de calefacción residencial basado en el consumo total mensual de
 gas natural (2015).
\end_layout

\begin_layout Itemize
Predicción de la demanda de importación de crudo en Taiwán (2014).
\end_layout

\begin_layout Itemize
Predicción del desempeño de las estrategias de pronóstico para la demanda
 de repuestos navales (2012).
\end_layout

\begin_layout Section
Modelado de clasificación multiclase 
\begin_inset CommandInset citation
LatexCommand cite
key "DM2011"

\end_inset


\end_layout

\begin_layout Standard
Para desarrollar un modelo o esquema de machine learning para resolver problemas
 de clasificación multiclase, es necesario conocer los componentes esenciales
 que la forman.
\end_layout

\begin_layout Subsection
Ejemplos o instancias
\end_layout

\begin_layout Standard
La entrada de un esquema de aprendizaje automático es un conjunto de instancias.
 Estas instancias son las cosas que deben ser clasificadas, asociadas o
 agrupadas.
 En el escenario estándar, cada instancia es un ejemplo individual e independien
te del concepto que se debe aprender.
 Para el problema de estudio el proceso de Business Intelligence es quien
 provee las instancias.
\end_layout

\begin_layout Subsection
Características o atributos
\end_layout

\begin_layout Standard
Las instancias son caracterizadas mediante los valores de un conjunto predetermi
nado de atributos.
 Cada instancia proporciona una entrada al aprendizaje automático y es caracteri
zado por los valores de un conjunto fijo y predefinido de características
 o atributos.
\end_layout

\begin_layout Subsection
Etiquetas
\end_layout

\begin_layout Standard
Las cantidades nominales tienen valores que son símbolos distintos.
 Los valores mismos sirven como etiquetas o nombres, de ahí el término nominal,
 que viene de la palabra latina para nombre.
 Los atributos nominales a veces se llaman categorizados, enumerados o discretos.
\end_layout

\begin_layout Subsection
Conjunto de entrenamiento
\end_layout

\begin_layout Standard
El grupo de ejemplos utilizados en el proceso de entrenamiento de los algoritmos
 de aprendizaje automático constituyen el conjunto de entrenamiento.
\end_layout

\begin_layout Subsection
Algoritmos de clasificación multiclase
\end_layout

\begin_layout Standard
Constituye el conjunto de algoritmos de machine que soportan problemas de
 clasificación multiclase.
\end_layout

\begin_layout Standard
Hipótesis, Parámetros, Función de costo, Objetivo.
\end_layout

\begin_layout Standard
Funcion Objetivo (f), Variables de entrada (X), Variable de salida (Y).
 Y = f(X)
\end_layout

\begin_layout Subsection
Conjunto de prueba
\end_layout

\begin_layout Standard
Para predecir el rendimiento de un clasificador sobre nuevos datos, necesitamos
 evaluar su tasa de error en un conjunto de datos que no desempeñó ningún
 papel en la formación del clasificador.
 Este conjunto de datos independiente se denomina conjunto de prueba.
\end_layout

\begin_layout Section
Algoritmos de clasificación en WEKA
\end_layout

\begin_layout Standard
Weka es una colección de algoritmos de aprendizaje automático para tareas
 de minería de datos.
 Los algoritmos pueden ser aplicados directamente a un conjunto de datos
 o llamados desde código Java.
 Weka contiene herramientas para pre-procesamiento de datos, clasificación,
 regresión, clustering, reglas de asociación y visualización.
 También es adecuado para desarrollar nuevos esquemas de aprendizaje automático
 
\begin_inset CommandInset citation
LatexCommand citet
key "Weka3"

\end_inset

.
 En el problema de estudio se utiliza el conjunto de algoritmos de clasificación
 de Weka 
\begin_inset CommandInset citation
LatexCommand cite
key "DM2016"

\end_inset

.
 Los algoritmos de clasificación de Weka que se utilizarán son los siguientes
 
\begin_inset CommandInset citation
LatexCommand cite
key "WekaCla"

\end_inset

:
\end_layout

\begin_layout Subsection
Clasificadores bayesianos
\end_layout

\begin_layout Standard
NaiveBayes implementa el clasificador probabilístico Naive Bayes.
 NaiveBayesSimple usa la distribución normal para modelar atributos numéricos.
 NaiveBayes puede usar estimadores de densidad del núcleo, que mejoran el
 rendimiento si la suposición de normalidad es groseramente incorrecta;
 También puede manejar atributos numéricos mediante discretización supervisada.
\end_layout

\begin_layout Subsubsection
BayesNet
\end_layout

\begin_layout Standard
BayesNet constituye la clase Java base para un clasificador Bayes Network
 (Red Bayesiana).
 Aprende utilizando diversos algoritmos de búsqueda y medidas de calidad.
 Proporciona estructuras de datos (estructura de red, distribuciones de
 probabilidad condicional, etc.) y facilidades comunes a los algoritmos de
 aprendizaje Bayes Network tales como K2 y B 
\begin_inset CommandInset citation
LatexCommand citet
key "WekaMan3-8-0"

\end_inset

.
\end_layout

\begin_layout Subsubsection
NaiveBayes
\end_layout

\begin_layout Standard
NaiveBayes constituye la clase Java base para un clasificador Naive Bayes
 usando estimadores de clases.
 Los valores de precisión del estimador numérico se eligen basándose en
 el análisis de los datos de entrenamiento.
 Por esta razón, el clasificador no es un UpdateableClassifier (que en el
 uso típico se inicializan con cero las instancias de entrenamiento) 
\begin_inset CommandInset citation
LatexCommand citet
key "John1995"

\end_inset

.
\end_layout

\begin_layout Subsubsection
NaiveBayesMultinomial
\end_layout

\begin_layout Standard
NaiveBayesMultinomial constituye la clase Java para construir y utilizar
 un clasificador Naive Bayes multinomial.
 La ecuación central para este clasificador: 
\shape italic

\begin_inset Formula $P\left[C_{i}|D\right]=\left(P\left[D|C_{i}\right]xP\left[C_{i}\right]\right)/P\left[D\right]$
\end_inset


\shape default
 (regla de Bayes), donde 
\shape italic

\begin_inset Formula $C_{i}$
\end_inset


\shape default
 es la clase 
\shape italic

\begin_inset Formula $i$
\end_inset


\shape default
 y 
\shape italic

\begin_inset Formula $D$
\end_inset


\shape default
 es un documento 
\begin_inset CommandInset citation
LatexCommand citet
key "Mccallum1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
NaiveBayesMultinomialUpdateable
\end_layout

\begin_layout Standard
NaiveBayesMultinomial constituye la clase Java para construir y utilizar
 un clasificador Naive Bayes multinomial.
 La ecuación central para este clasificador: 
\shape italic

\begin_inset Formula $P\left[C_{i}|D\right]=\left(P\left[D|C_{i}\right]xP\left[C_{i}\right]\right)/P\left[D\right]$
\end_inset


\shape default
 (regla de Bayes), donde 
\shape italic

\begin_inset Formula $C_{i}$
\end_inset


\shape default
 es la clase 
\shape italic

\begin_inset Formula $i$
\end_inset


\shape default
 y 
\shape italic

\begin_inset Formula $D$
\end_inset


\shape default
 es un documento.
 Es la versión incremental del algoritmo 
\begin_inset CommandInset citation
LatexCommand citet
key "Mccallum1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
NaiveBayesUpdateable
\end_layout

\begin_layout Standard
NaiveBayesUpdateable constituye la clase Java para un clasificador Naive
 Bayes utilizando estimadores de clases.
 Esta es la versión actualizable de NaiveBayes.
 Este clasificador utiliza una precisión predeterminada de 0.1 para atributos
 numéricos cuando se invoca 
\shape italic
buildClassifier
\shape default
 con cero instancias de entrenamiento 
\begin_inset CommandInset citation
LatexCommand citet
key "John1995"

\end_inset

.
\end_layout

\begin_layout Subsection
Basado en funciones
\end_layout

\begin_layout Standard
Los algoritmos incluidos en la categoría de funciones incluyen un grupo
 variado de clasificadores que se pueden escribir como ecuaciones matemáticas
 de una manera razonablemente natural.
 Otros métodos, como los árboles de decisión y las reglas, no pueden (hay
 excepciones: Naive Bayes tiene una formulación matemática simple).
\end_layout

\begin_layout Subsubsection
Logistic
\end_layout

\begin_layout Standard
Logistic constituye la clase Java para construir y utilizar un modelo multinomia
l de regresión logística con un estimador de cresta.
 Si hay 
\shape italic

\begin_inset Formula $k$
\end_inset


\shape default
 clases para 
\shape italic

\begin_inset Formula $n$
\end_inset


\shape default
 instancias con 
\shape italic

\begin_inset Formula $m$
\end_inset


\shape default
 atributos, la matriz de parámetros 
\shape italic

\begin_inset Formula $B$
\end_inset


\shape default
 a calcular será una matriz 
\shape italic

\begin_inset Formula $m*\left(k-1\right)$
\end_inset


\shape default
.
 Aunque la Regresión Logística original no se ocupa de los pesos de las
 instancias, se modifica el algoritmo para manejar los pesos de las instancias
 
\begin_inset CommandInset citation
LatexCommand citet
key "leCessie1992"

\end_inset

.
\end_layout

\begin_layout Subsubsection
MultilayerPerceptron
\end_layout

\begin_layout Standard
MultilayerPerceptron es un clasificador que utiliza 
\shape italic
back propagation
\shape default
 para clasificar instancias.
 Esta red puede ser monitorizada y modificada durante el tiempo de entrenamiento.
 Los nodos de esta red son todos 
\shape italic
sigmoides
\shape default
 (excepto cuando la clase es numérica, en cuyo caso los nodos de salida
 se convierten en unidades lineales sin umbrales).
\end_layout

\begin_layout Standard
MultilayerPerceptron es una red neuronal que se entrena usando propagación
 posterior.
 Aunque se menciona en las funciones, difiere de los otros esquemas porque
 tiene su propia interfaz de usuario.
\end_layout

\begin_layout Subsubsection
SimpleLogistic
\end_layout

\begin_layout Standard
SimpleLogistic constituye un clasificador para la construcción de modelos
 de regresión logística lineal.
 LogitBoost con funciones de regresión simples como base de aprendizaje
 se utiliza para ajustar los modelos logísticos.
 El número óptimo de iteraciones LogitBoost a realizar es validación cruzada,
 lo que conduce a la selección automática de atributos 
\begin_inset CommandInset citation
LatexCommand citet
key "Landwehr2005"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Sumner2005"

\end_inset

.
\end_layout

\begin_layout Subsubsection
SMO
\end_layout

\begin_layout Standard
Constituye el algoritmo Sequential Minimal Optimization para el entrenamiento
 de un clasificador Support Vector.
 Implementa el algoritmo de optimización mínima secuencial de John Platt.
 Esta implementación reemplaza globalmente todos los valores perdidos y
 transforma los atributos nominales en binarios.
 También normaliza todos los atributos por defecto.
 (En ese caso, los coeficientes de la salida se basan en datos normalizados
 y no en los datos originales).
 Los problemas multiclase se resuelven utilizando la clasificación Pairwise
 (aka 1-vs-1).
 En el caso multiclase, las probabilidades predichas se acoplan utilizando
 el método de acoplamiento Pairwise de Hastie y Tibshirani 
\begin_inset CommandInset citation
LatexCommand citet
key "Platt1998"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Keerthi2001"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Hastie1998"

\end_inset

.
\end_layout

\begin_layout Subsection
Clasificadores perezosos (basados en instancia)
\end_layout

\begin_layout Standard
Los aprendices perezosos almacenan las instancias de entrenamiento y no
 realizan ningún trabajo real hasta el momento de la clasificación.
 El estudiante perezoso más simple es el clasificador k-nearest-neighbor,
 que implementa IBk.
 Se puede usar una variedad de algoritmos de búsqueda diferentes para acelerar
 la tarea de encontrar los vecinos más cercanos.
\end_layout

\begin_layout Subsubsection
IBk
\end_layout

\begin_layout Standard
Clasificador K-nearest neighbours (K vecinos más cercanos).
 Puede seleccionar el valor apropiado de K basado en la validación cruzada.
 También se puede hacer ponderación de distancias 
\begin_inset CommandInset citation
LatexCommand citet
key "Aha1991"

\end_inset

.
\end_layout

\begin_layout Subsubsection
KStar
\end_layout

\begin_layout Standard
K* es un clasificador basado en instancias, es decir, la clase de una instancia
 de prueba se basa en la clase de aquellas instancias de entrenamiento similares
 a ella, según lo determinado por alguna función de similitud.
 Se diferencia de otros esquemas de aprendizaje basados en instancia en
 que utiliza una función de distancia basada en entropía 
\begin_inset CommandInset citation
LatexCommand citet
key "Cleary1995"

\end_inset

.
\end_layout

\begin_layout Subsubsection
LWL
\end_layout

\begin_layout Standard
Locally Weighted Learning (Aprendizaje ponderado localmente) utiliza un
 algoritmo basado en instancias para asignar pesos de instancias que luego
 son utilizados por un especificado 
\shape italic
WeightedInstancesHandler
\shape default
.
 Puede hacer clasificación (por ejemplo, utilizando Naive Bayes) o regresión
 (por ejemplo, utilizando Linear Regression) 
\begin_inset CommandInset citation
LatexCommand citet
key "Frank2003"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Atkeson1996"

\end_inset

.
\end_layout

\begin_layout Subsection
Meta algoritmos
\end_layout

\begin_layout Standard
Los algoritmos de Metalearning toman clasificadores y los convierten en
 aprendices más poderosos.
 Un parámetro especifica el o los clasificadores base; otros especifican
 el número de iteraciones para esquemas iterativos tales como bagging y
 boosting y una inicial semilla para el generador de números aleatorios.
\end_layout

\begin_layout Subsubsection
AdaBoostM1
\end_layout

\begin_layout Standard
AdaBoostM1 constituye la clase Java para impulsar un clasificador de clase
 nominal utilizando el método Adaboost M1.
 Sólo se pueden abordar problemas de clase nominal.
 A menudo mejora dramáticamente el rendimiento, pero a veces sobreajusta
 
\begin_inset CommandInset citation
LatexCommand citet
key "Freund1996"

\end_inset

.
\end_layout

\begin_layout Subsubsection
AttributeSelectedClassifier
\end_layout

\begin_layout Standard
La dimensionalidad de los datos de entrenamiento y de prueba se reduce mediante
 la selección de los atributos antes de pasarlos a un clasificador.
\end_layout

\begin_layout Subsubsection
Bagging
\end_layout

\begin_layout Standard
Bagging constituye la clase Java para capturar un clasificador que reduce
 la varianza.
 Puede hacer clasificación y regresión 
\begin_inset CommandInset citation
LatexCommand citet
key "Breiman1996"

\end_inset

.
\end_layout

\begin_layout Subsubsection
ClassificationViaRegression
\end_layout

\begin_layout Standard
ClassificationViaRegression constituye la clase Java para hacer clasificación
 utilizando métodos de regresión.
 La clase es binarizada y se construye un modelo de regresión por cada valor
 de clase 
\begin_inset CommandInset citation
LatexCommand citet
key "Frank1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
CVParameterSelection
\end_layout

\begin_layout Standard
CVParameterSelection constituye la clase Java para realizar la selección
 de parámetros mediante validación cruzada, para cualquier clasificador
 
\begin_inset CommandInset citation
LatexCommand citet
key "Kohavi1995"

\end_inset

.
\end_layout

\begin_layout Subsubsection
FilteredClassifier
\end_layout

\begin_layout Standard
FilteredClassifier constituye la clase Java para ejecutar un clasificador
 arbitrario en datos que se han pasado a través de un filtro arbitrario.
 Al igual que el clasificador, la estructura del filtro se basa exclusivamente
 en los datos de entrenamiento, y las instancias de prueba serán procesadas
 por el filtro sin cambiar su estructura.
\end_layout

\begin_layout Subsubsection
IterativeClassifierOptimizer
\end_layout

\begin_layout Standard
IterativeClassifierOptimizer elige el mejor número de iteraciones para un
 IterativeClassifier tal como LogitBoost, utilizando validación cruzada.
 Optimiza el número de iteraciones del clasificador iterativo utilizando
 la validación cruzada.
\end_layout

\begin_layout Subsubsection
LogitBoost
\end_layout

\begin_layout Standard
LogitBoost constituye la clase Java para realizar una regresión logística
 aditiva.
 Realiza clasificación utilizando un esquema de regresión como base del
 aprendizaje, y puede manejar problemas multiclase 
\begin_inset CommandInset citation
LatexCommand citet
key "Friedman1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
MultiClassClassifier
\end_layout

\begin_layout Standard
MultiClassClassifier constituye un metaclasificador para manejar conjuntos
 de datos multiclase con clasificadores de 2 clases.
 Este clasificador también es capaz de aplicar códigos de salida de corrección
 de errores para aumentar la precisión.
\end_layout

\begin_layout Subsubsection
MultiClassClassifierUpdateable
\end_layout

\begin_layout Standard
MultiClassClassifierUpdateable constituye un metaclasificador para manejar
 conjuntos de datos multiclase con clasificadores de 2 clases.
 Este clasificador también es capaz de aplicar códigos de salida de corrección
 de errores para aumentar la precisión.
 El clasificador base debe ser un clasificador actualizable.
\end_layout

\begin_layout Subsubsection
MultiScheme
\end_layout

\begin_layout Standard
MultiScheme constituye la clase Java para seleccionar un clasificador entre
 varios, utilizando validación cruzada en los datos de entrenamiento.
 El rendimiento se mide en función del porcentaje de aciertos (clasificación)
 o del error medio cuadrático (regresión).
\end_layout

\begin_layout Subsubsection
RandomCommittee
\end_layout

\begin_layout Standard
RandomCommittee constituye la clase Java para construir un conjunto aleatorizado
 de clasificadores base.
 Cada clasificador base se construye utilizando una semilla de números aleatorio
s diferentes (pero basado en los mismos datos).
 La predicción final es un promedio directo de las predicciones generadas
 por los clasificadores base individuales.
\end_layout

\begin_layout Subsubsection
RandomizableFilteredClassifier
\end_layout

\begin_layout Standard
RandomizableFilteredClassifier constituye la clase Java para ejecutar un
 clasificador arbitrario en datos que han pasado a través de un filtro arbitrari
o.
 Al igual que el clasificador, la estructura del filtro se basa exclusivamente
 en los datos de entrenamiento, y las instancias de prueba serán procesadas
 por el filtro sin cambiar su estructura.
\end_layout

\begin_layout Subsubsection
RandomSubSpace
\end_layout

\begin_layout Standard
Este método construye un clasificador basado en árbol de decisión que mantiene
 la mayor precisión en los datos de entrenamiento y mejora la precisión
 de generalización a medida que crece en complejidad.
 El clasificador consta de múltiples árboles construidos sistemáticamente
 mediante selección pseudoaleatoria de subconjuntos de componentes del vector
 de características, es decir, árboles construidos en subespacios elegidos
 aleatoriamente 
\begin_inset CommandInset citation
LatexCommand citet
key "Ho1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Stacking
\end_layout

\begin_layout Standard
Stacking combina varios clasificadores utilizando el método de apilamiento.
 Puede hacer clasificación o regresión 
\begin_inset CommandInset citation
LatexCommand citet
key "Wolpert1992"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Vote
\end_layout

\begin_layout Standard
Vote constituye la clase Java para combinar clasificadores.
 Se dispone de diferentes combinaciones de estimaciones de probabilidad
 para la clasificación 
\begin_inset CommandInset citation
LatexCommand citet
key "Kuncheva2004"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Kittler1998"

\end_inset

.
\end_layout

\begin_layout Subsubsection
WeightedInstancesHandlerWrapper
\end_layout

\begin_layout Standard
Envoltorio genérico alrededor de cualquier clasificador para permitir soporte
 de instancias ponderadas (weighted instances).
 Utiliza el remuestreo con pesos si el clasificador base no implementa la
 interfaz 
\shape italic
weka.core.WeightedInstancesHandler
\shape default
 y hay otros pesos de instancias 1.0 presentes.
 De forma predeterminada, los datos de entrenamiento se pasan al clasificador
 base si puede manejar pesos de instancia.
 Sin embargo, es posible forzar el uso del remuestreo con pesos también.
\end_layout

\begin_layout Subsection
Sistema de reglas
\end_layout

\begin_layout Subsubsection
DecisionTable
\end_layout

\begin_layout Standard
Constituye la clase Java para la construcción y uso de un clasificador de
 mayoría de una tabla de decisión simple 
\begin_inset CommandInset citation
LatexCommand citet
key "Kohavi1995a"

\end_inset

.
\end_layout

\begin_layout Standard
DecisionTable crea un clasificador de tablas de decisiones.
 Evalúa los subconjuntos de características utilizando la mejor búsqueda
 primero y puede usar la validación cruzada para la evaluación (Kohavi 1995b).
 Una opción es utilizar el método del vecino más cercano para determinar
 la clase para cada instancia que no está cubierta por una entrada de tabla
 de decisión, en lugar de la mayoría global de la tabla, basado en el mismo
 conjunto de características.
\end_layout

\begin_layout Subsubsection
JRip
\end_layout

\begin_layout Standard
Implementa el aprendizaje de reglas proposicionales 
\begin_inset Quotes eld
\end_inset

Repeated Incremental Pruning to Produce Error Reduction
\begin_inset Quotes erd
\end_inset

 (RIPPER) o 
\begin_inset Quotes eld
\end_inset

Poda Incremental Repetida
\begin_inset Quotes erd
\end_inset

 para producir reducción de errores.
 Fue propuesto por William W.
 Cohen como una versión optimizada de IREP 
\begin_inset CommandInset citation
LatexCommand citet
key "Cohen1995"

\end_inset

.
\end_layout

\begin_layout Subsubsection
OneR
\end_layout

\begin_layout Standard
Constituye la clase Java para construir y utilizar un clasificador 1R.
 Utiliza el atributo de error mínimo para la predicción, discretizando los
 atributos numéricos 
\begin_inset CommandInset citation
LatexCommand citet
key "Holte1993"

\end_inset

.
\end_layout

\begin_layout Subsubsection
PART
\end_layout

\begin_layout Standard
Utiliza dividir y conquistar.
 Construye un árbol de decisión C4.5 parcial.
 Constituye la clase Java para generar una lista de decisiones PART.
 Crea un árbol de decisión C4.5 parcial en cada iteración y convierte la
 "mejor" hoja en una regla 
\begin_inset CommandInset citation
LatexCommand citet
key "Frank1998a"

\end_inset

.
\end_layout

\begin_layout Subsubsection
ZeroR
\end_layout

\begin_layout Standard
Constituye la clase Java para construir y usar un clasificador 0-R.
 Predice la media (para una clase numérica) o la moda (para una clase nominal).
\end_layout

\begin_layout Subsection
Árboles de decisión
\end_layout

\begin_layout Standard
De los clasificadores de árboles en WEKA, el J4.8 reimplementa C4.5.
 Puede construir un árbol binario en lugar de uno con varias ramas.
\end_layout

\begin_layout Subsubsection
DecisionStump
\end_layout

\begin_layout Standard
Constituye la clase Java para construir y utilizar un tocón de decisión.
 Generalmente se utiliza en conjunción con un algoritmo de boosting.
 Realiza regresión (basado en el error cuadrático medio) o clasificación
 (basado en la entropía).
\end_layout

\begin_layout Subsubsection
HoeffdingTree
\end_layout

\begin_layout Standard
Un árbol Hoeffding (VFDT) es un algoritmo de inducción de árbol de decisión
 incremental que es capaz de aprender de flujos de datos masivos, suponiendo
 que la distribución de la generación de los ejemplos no cambian con el
 tiempo.
 Los árboles Hoeffding explotan el hecho de que una pequeña muestra puede
 a menudo ser suficiente para elegir un atributo de división óptimo.
 Esta idea está apoyada matemáticamente por el límite de Hoeffding, que
 cuantifica el número de observaciones (en nuestro caso, ejemplos) necesarios
 para estimar algunas estadísticas dentro de una precisión prescrita (en
 nuestro caso, la bondad de un atributo).
 Una característica teóricamente atractiva de Hoeffding Trees no compartida
 por otros aprendizajes por árboles de decisión incremental es que tiene
 garantías sólidas de rendimiento.
 Utilizando el límite de Hoeffding se puede demostrar que su salida es asintótic
amente casi idéntica a la de un aprendizaje no incremental usando infinidad
 de ejemplos 
\begin_inset CommandInset citation
LatexCommand citet
key "Hulten2001"

\end_inset

.
\end_layout

\begin_layout Subsubsection
J48
\end_layout

\begin_layout Standard
Constituye la clase Java para generar un árbol de decisión C4.5 podado o
 no podado 
\begin_inset CommandInset citation
LatexCommand citet
key "Quinlan1993"

\end_inset

.
\end_layout

\begin_layout Subsubsection
LMT
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Árboles de Modelos Logísticos
\begin_inset Quotes erd
\end_inset

 o 
\begin_inset Quotes eld
\end_inset

Logistic Model Trees
\begin_inset Quotes erd
\end_inset

 (LMT).
 Clasificador para la construcción de árboles de modelos logísticos, que
 son árboles de clasificación con funciones de regresión logística en las
 hojas.
 El algoritmo puede manejar variables binarias y multiclases, atributos
 numéricos y nominales y valores faltantes 
\begin_inset CommandInset citation
LatexCommand citet
key "Landwehr2005"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Sumner2005"

\end_inset

.
\end_layout

\begin_layout Subsubsection
RandomForest
\end_layout

\begin_layout Standard
Constituye la clase Java para construir un 
\begin_inset Quotes eld
\end_inset

Bosque de Árboles Aleatorios
\begin_inset Quotes erd
\end_inset

 o 
\begin_inset Quotes eld
\end_inset

Forest of Random Trees
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Breiman2001"

\end_inset

.
\end_layout

\begin_layout Subsubsection
RandomTree
\end_layout

\begin_layout Standard
Constituye la clase Java para construir un árbol que considera K atributos
 elegidos al azar en cada nodo.
 No realiza poda.
 También tiene una opción que permite la estimación de probabilidades de
 clase (o media objetivo en el caso de regresión) basado en un conjunto
 de retención (backfitting).
\end_layout

\begin_layout Subsubsection
REPTree
\end_layout

\begin_layout Standard
Aprendizaje rápido con árboles de decisión.
 Construye un árbol de decisión/regresión utilizando la información de ganancia/
varianza y la elimina utilizando poda de reducción de errores (con backfitting-a
juste posterior).
 Sólo ordena valores para atributos numéricos.
 Los valores faltantes se tratan dividiendo las instancias correspondientes
 en fragmentos (es decir, como en C4.5).
\end_layout

\begin_layout Section
Evaluación del aprendizaje
\end_layout

\begin_layout Standard
La evaluación es la clave para lograr avances reales en el aprendizaje automátic
o.
 Entre las técnicas de evaluación se destacan la Validación Cruzada (Cross-Valid
ation) y la Validación Cruzada k-pliegues Estratificado (Stratified k-fold
 Cross-Validation).
 
\end_layout

\begin_layout Standard
La técnica de Cross-Validation consiste en dividir los datos en un número
 de pliegues o particiones, si por ejemplo elegimos cuatro, entonces cada
 partición se utiliza para las pruebas y las demás para el entrenamiento,
 al repetir este proceso 4 veces se consigue que cada partición se haya
 utilizado una vez como conjunto de pruebas.
 
\end_layout

\begin_layout Standard
La técnica estándar para predecir la tasa de error es Stratified k-fold
 Cross-Validation, donde la estratificación se refiere al proceso de reorganizar
 los datos de tal manera a asegurar que cada pliegue sea una buena representació
n del conjunto.
 Comúnmente se acepta que 10 es el número de pliegues con el que se obtiene
 la mejor estimación de error, idea basada en diversas pruebas sobre conjuntos
 de datos diferentes y para distintas técnicas de aprendizaje 
\begin_inset CommandInset citation
LatexCommand cite
key "DM2011"

\end_inset

.
\end_layout

\begin_layout Standard
Otra técnica es el Porcentaje de División (Percentage Split) con el que
 puede retener para la prueba un determinado porcentaje de los datos.
 Es una alternativa utilizar un conjunto de pruebas separado o una división
 porcentual de los datos de entrenamiento.
 Si elegimos 60% como porcentaje de división, entonces el conjunto de prueba
 se constituirá con el 40% de las instancias y el conjunto de entrenamiento
 con el 60% de las instancias.
\end_layout

\begin_layout Section
Métricas de desempeño 
\begin_inset CommandInset citation
LatexCommand cite
key "DM2011"

\end_inset


\end_layout

\begin_layout Standard
Para los problemas de clasificación, es natural medir el rendimiento de
 un clasificador en términos de la tasa de error (error rate).
 El clasificador predice la clase de cada instancia: si es correcta se cuenta
 como un éxito, sino se cuenta como un error.
 La tasa de error es sólo la proporción de errores cometidos sobre un conjunto
 de instancias, y mide el rendimiento general del clasificador.
 Por supuesto, lo que nos interesa es el probable desempeño futuro en nuevos
 datos, no el rendimiento pasado en datos antiguos.
\end_layout

\begin_layout Standard
Para predecir el rendimiento de un clasificador en nuevos datos, necesitamos
 evaluar su tasa de error en un conjunto de datos que no desempeñó ningún
 papel en la formación del clasificador.
 Este conjunto de datos independiente se denomina conjunto de prueba.
 En tales situaciones se suele hablar de tres conjuntos de datos: los datos
 de entrenamiento, los datos de validación y los datos de prueba.
 
\end_layout

\begin_layout Standard
Los datos de entrenamiento son utilizados por uno o más esquemas de aprendizaje
 para conocer clasificadores.
 Los datos de validación se utilizan para optimizar los parámetros de los
 clasificadores, o para seleccionar uno determinado.
 A continuación, los datos de prueba se utilizan para calcular la tasa de
 error del método final optimizado.
 Cada uno de los tres conjuntos debe ser independiente: El conjunto de validació
n debe ser diferente del conjunto de entrenamiento para obtener un buen
 desempeño en la etapa de optimización o selección y el conjunto de pruebas
 debe ser diferente de ambos para obtener una estimación confiable de la
 tasa de error real.
\end_layout

\begin_layout Subsection
Aciertos
\end_layout

\begin_layout Standard
Número de instancias correctamente clasificadas.
\end_layout

\begin_layout Subsection
Porcentaje de Aciertos
\end_layout

\begin_layout Standard
Porcentaje de instancias correctamente clasificadas.
\end_layout

\begin_layout Subsection
Estadística Kappa (Kappa Statistic)
\end_layout

\begin_layout Standard
En problemas de clasificación para aplicaciones reales normalmente los errores
 cuestan diferentes cantidades.
 Por ejemplo en bancos y financieras el costo de prestar a una persona que
 no paga sus deudas es mayor que el costo de rechazar un préstamo a una
 persona que es pagadora.
 Los Verdaderos Positivos (True Positive - TP) y Verdaderos Negativos (True
 Negative - TN) son clasificaciones correctas.
 Un Falso Positivo (False Positive - FP) es cuando el resultado se predice
 incorrectamente como sí (o positivo) cuando es realmente no (o negativo).
 Un Falso Negativo (False Negative - FN) es cuando el resultado se predice
 incorrectamente como negativo cuando es realmente positivo.
 En la predicción multiclase, cada elemento de la matriz de confusión muestra
 el número de ejemplos de prueba para los que la clase real es la fila y
 la clase prevista es la columna.
 Son buenos resultados los grandes números en la diagonal principal e idealmente
 cero fuera de la diagonal principal.
 
\begin_inset Quotes eld
\end_inset

Kappa se utiliza para medir el acuerdo entre la predicción y la observación
 de las categorizaciones de un conjunto de datos, mientras que se corrige
 para un acuerdo que ocurre por casualidad
\begin_inset Quotes erd
\end_inset

.
 Si los evaluadores están totalmente de acuerdo Kappa alcanza un valor máximo
 igual a 1.
 Si no hay total acuerdo entre los evaluadores, entonces Kappa tiene un
 valor 
\begin_inset Formula $<1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\kappa=\frac{Pr\left(a\right)-Pr\left(e\right)}{1-Pr\left(e\right)}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Donde: 
\begin_inset Formula $Pr\left(a\right)$
\end_inset

 es el acuerdo observado relativo entre los observadores y 
\begin_inset Formula $Pr\left(e\right)$
\end_inset

 es la probabilidad hipotética de acuerdo al azar utilizando los datos observado
s para calcular las probabilidades de que cada observador clasifique aleatoriame
nte cada categoría.
\end_layout

\begin_layout Subsection
Sensibilidad (Recall)
\end_layout

\begin_layout Standard
Calcula la sensibilidad con respecto a una clase en particular, esto se
 define como: positivos correctamente clasificados / positivos totales.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Recall=\frac{TP}{TP+FN}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Precisión (Precision)
\end_layout

\begin_layout Standard
Calcula la precisión con respecto a una clase en particular, esto se define
 como: positivos correctamente clasificados / total predicho como positivo.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Precision=\frac{TP}{TP+FP}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Puntuación-F (F-Measure)
\end_layout

\begin_layout Standard
La Puntuación-F es una medida de la exactitud de una prueba.
 La Puntuación-F puede interpretarse como un promedio ponderado de la precisión
 y sensibilidad, donde alcanza su mejor valor en 1 y el peor en 0.
 Se define como: 2 * Recall * Precision / (Recall + Precision).
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
F-Measure=\frac{2*Recall*Precision}{\left(Recall+Precision\right)}
\end{equation}

\end_inset


\end_layout

\end_body
\end_document
